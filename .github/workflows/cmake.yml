name: CMake

on:
  pull_request:
    paths:
      - ".github/workflows/cmake.yml"
      - "cmake/**"
      - "config/**"
      - "examples/**"
      - "include/**"
      - "src/**"
      - "test/**"
      - "CMakelists.txt"
      - "!**.md"

  push:
    branches:
      - master
    paths:
      - ".github/workflows/cmake.yml"
      - "cmake/**"
      - "config/**"
      - "examples/**"
      - "include/**"
      - "src/**"
      - "test/**"
      - "CMakelists.txt"
      - "!**.md"

permissions:
  contents: read

env:
  CFLAGS: "-Wall -pedantic -Wno-unused-variable -Wno-unused-function"
  CXXFLAGS: "-Wall -pedantic -Wno-unused-variable -Wno-unused-function"
  FFLAGS: "-fimplicit-none -fcheck=all"
  BUILD_TYPE: Release

jobs:
  build-all-os:
    # Cross-platform builds with comprehensive testing
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
        build-type: [Release, Debug]
        shared: [ON, OFF]
        cpp-version: [17, 20, 23]
        exclude:
          - build-type: Release
            shared: OFF
          - build-type: Release
            shared: ON
            cpp-version: 17
          - build-type: Release
            shared: ON
            cpp-version: 20
        include:
          - os: windows-latest
            build-type: Release
            shared: OFF
            cpp-version: 17

    steps:
      - name: Checkout <T>LAPACK
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          os: ${{ matrix.os }}
          install-extras: ${{ (matrix.os == 'ubuntu-latest' && 'mpfr') || '' }}

      - name: Setup external libraries
        uses: ./.github/actions/setup-external-libs
        with:
          libraries: ${{ (matrix.os == 'ubuntu-latest' && (matrix.cpp-version != '23' && 'mdspan,eigen' || 'eigen')) || '' }}
          cpp-version: ${{ matrix.cpp-version }}

      - name: Configure TLAPACK
        uses: ./.github/actions/configure-tlapack
        with:
          build-type: ${{ matrix.build-type }}
          shared-libs: ${{ matrix.shared }}
          cpp-version: ${{ matrix.cpp-version }}
          compiler-setup: ${{ (matrix.os == 'macos-latest' && 'macos') || (matrix.os == 'windows-latest' && 'windows') || 'ubuntu' }}
          extra-options: >-
            ${{ (matrix.os == 'ubuntu-latest' && '-D TLAPACK_TEST_EIGEN=ON -D TLAPACK_TEST_MPFR=ON -D TLAPACK_TEST_QUAD=ON') || '' }}
            ${{ ((matrix.os == 'ubuntu-latest' && matrix.cpp-version != '23') && ' -D TLAPACK_TEST_MDSPAN=ON') || '' }}
            ${{ ((matrix.os == 'ubuntu-latest' && matrix.build-type == 'Release') && ' -D BUILD_BLASPP_TESTS=ON -D BUILD_LAPACKPP_TESTS=ON') || '' }}

      - name: Test TLAPACK
        uses: ./.github/actions/test-tlapack
        with:
          build-type: ${{ matrix.build-type }}
          os: ${{ matrix.os }}

  build-with-external-blas:
    # Build with different BLAS implementations
    # Note: LAPACK++ and testBLAS tests are allowed to fail without failing the job
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        blas-vendor: [OpenBLAS, MKL, BLIS]
        include:
          - blas-vendor: OpenBLAS
            install-extras: openblas
            cmake-flags: '-D CMAKE_CXX_FLAGS="$CXXFLAGS -D LAPACK_FORTRAN_ADD_"'
          - blas-vendor: MKL
            install-extras: mkl
            cmake-flags: ""
          - blas-vendor: BLIS
            install-extras: blis
            cmake-flags: '-D CMAKE_CXX_FLAGS="$CXXFLAGS -D LAPACK_FORTRAN_ADD_"'
            extra-libraries: lapack

    steps:
      - name: Checkout <T>LAPACK
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          os: ubuntu-latest
          install-extras: ${{ matrix.install-extras }}

      - name: Setup external libraries
        uses: ./.github/actions/setup-external-libs
        with:
          libraries: blaspp,lapackpp${{ matrix.extra-libraries && ',lapack' || '' }}
          bla-vendor: ${{ matrix.blas-vendor }}

      - name: Configure TLAPACK
        uses: ./.github/actions/configure-tlapack
        with:
          build-type: ${{ env.BUILD_TYPE }}
          extra-options: >-
            ${{ matrix.cmake-flags }}
            -D TLAPACK_USE_LAPACKPP=ON
            -D BUILD_LAPACKPP_TESTS=OFF
            -D BUILD_testBLAS_TESTS=OFF
            ${{ (matrix.extra-libraries && '-D CMAKE_PREFIX_PATH=${{github.workspace}}/lapack') || '' }}

      - name: Test TLAPACK
        uses: ./.github/actions/test-tlapack
        with:
          build-type: ${{ env.BUILD_TYPE }}
          run-examples: "false"

      - name: Build and run additional tests
        run: |
          # Build LAPACK++ tests
          cmake -B build -D BUILD_LAPACKPP_TESTS=ON
          cmake --build build --config ${{env.BUILD_TYPE}}

      # Mind that the job won't fail if only this step fails
      - name: Run LAPACK++ tests
        working-directory: build
        continue-on-error: true
        run: ctest -C ${{env.BUILD_TYPE}} -R lapackpp_test --output-on-failure

      - name: Build testBLAS tests
        run: |
          cmake -B build -D BUILD_testBLAS_TESTS=ON
          cmake --build build --config ${{env.BUILD_TYPE}}

      # Mind that the job won't fail if only this step fails
      - name: Run testBLAS tests
        working-directory: build/test/testBLAS
        continue-on-error: true
        run: ./testBLAS -r Automake

      - name: Install
        run: sudo cmake --build build --target install

  build-test-performance:
    # Performance testing build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout <T>LAPACK
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          os: ubuntu-latest

      - name: Setup external libraries
        uses: ./.github/actions/setup-external-libs
        with:
          libraries: blaspp,lapackpp

      - name: Configure TLAPACK
        uses: ./.github/actions/configure-tlapack
        with:
          build-type: ${{ env.BUILD_TYPE }}
          enable-testing: "OFF"
          enable-examples: "OFF"
          extra-options: >-
            -D TLAPACK_USE_LAPACKPP=ON
            -D TLAPACK_NDEBUG=ON

      - name: Build and Install
        run: sudo cmake --build build --config ${{env.BUILD_TYPE}} --target install

      - name: Install LAPACKE
        run: sudo apt install -y liblapacke-dev

      - name: Build and run performance example
        working-directory: examples/potrf
        run: |
          cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cmake --build build --target all
          ./build/example_potrf

  build-debug-with-lapackpp:
    # Debug build with comprehensive testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout <T>LAPACK
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          os: ubuntu-latest

      - name: Setup external libraries
        uses: ./.github/actions/setup-external-libs
        with:
          libraries: blaspp,lapackpp
          build-type: Debug

      - name: Configure TLAPACK
        uses: ./.github/actions/configure-tlapack
        with:
          build-type: Debug
          extra-options: >-
            -D TLAPACK_USE_LAPACKPP=ON
            -D BUILD_BLASPP_TESTS=ON
            -D BUILD_LAPACKPP_TESTS=ON
            -D BUILD_testBLAS_TESTS=OFF

      - name: Test TLAPACK
        uses: ./.github/actions/test-tlapack
        with:
          build-type: Debug

      - name: Build and run testBLAS tests
        run: |
          cmake -B build -D BUILD_testBLAS_TESTS=ON
          cmake --build build --config Debug

      # Mind that the job won't fail if only this step fails
      - name: Run testBLAS tests
        working-directory: build/test/testBLAS
        continue-on-error: true
        run: ./testBLAS -r Automake

      - name: Install
        run: sudo cmake --build build --target install

  build-examples-separately:
    # Build examples separately with different compilers
    runs-on: ubuntu-latest

    env:
      CXX: clang++
      CXXFLAGS: "-Wall -Wpedantic -Wno-unused-variable -Wno-unused-function -std=c++17"
      FFLAGS: "-fcheck=all"

    steps:
      - name: Checkout <T>LAPACK
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          os: ubuntu-latest

      - name: Install clang
        run: sudo apt install -y clang libblas-dev liblapack-dev

      - name: Setup external libraries
        uses: ./.github/actions/setup-external-libs
        with:
          libraries: mdspan,eigen

      - name: Configure TLAPACK
        uses: ./.github/actions/configure-tlapack
        with:
          build-type: Debug
          enable-testing: "OFF"
          enable-examples: "OFF"

      - name: Test TLAPACK
        uses: ./.github/actions/test-tlapack
        with:
          build-type: Debug
          run-examples: "false"
          run-tests: "false"
          run-standalone-tests: "false"

      - name: Build and run examples using CMake
        run: |
          directory=("access_types" "cpp_visualizer" "create_float_library" "cwrapper_gemm" "eigen" "eigenvalues" "fortranModule_caxpy" "fortranModule_ssymm" "gemm" "geqr2" "lu" "mdspan" "performance_eigen" "potrf" "extreme_interoperability")
          exec=("example_accessTypes" "cpp_visualizer_example" "example_create_float_library" "example_cwrapper_gemm" "example_eigen" "example_eigenvalues" "example_fortranModule_caxpy" "example_fortranModule_ssymm" "example_gemm" "example_geqr2" "example_lu" "example_mdspan" "performance_tlapack" "example_potrf" "example_interoperability")
          for i in ${!directory[@]}; do
            cd ${{github.workspace}}/examples/${directory[$i]}
            echo "Building and running ${directory[$i]}"
            cmake -B build -G Ninja
            cmake --build build --config Debug
            ./build/${exec[$i]}
          done

      - name: Build and run examples using Makefile
        run: |
          directory=("access_types" "create_float_library" "cwrapper_gemm" "eigen" "eigenvalues" "fortranModule_caxpy" "fortranModule_ssymm" "gemm" "geqr2" "mdspan" "performance_eigen" "extreme_interoperability")
          exec=("example_accessTypes" "example_create_float_library" "example_cwrapper_gemm" "example_eigen" "example_eigenvalues" "example_fortranModule_caxpy" "example_fortranModule_ssymm" "example_gemm" "example_geqr2" "example_mdspan" "performance_tlapack" "example_interoperability")
          ldflags=("" "" "-ltlapack_c -Wl,-rpath=/usr/local/lib" "" "-llapack -lblas -lm /lib/x86_64-linux-gnu/libgfortran.so.5" "-ltlapack_fortran -ltlapack_c -Wl,-rpath=/usr/local/lib /lib/x86_64-linux-gnu/libgfortran.so.5" "-ltlapack_fortran -ltlapack_c -Wl,-rpath=/usr/local/lib /lib/x86_64-linux-gnu/libgfortran.so.5" "" "" "" "")

          export CXXFLAGS="$CXXFLAGS -I/usr/local/include/eigen3"
          export FFLAGS="$FFLAGS -I/usr/local/include/tlapack/fortran"
          export LD="clang++"

          for i in ${!directory[@]}; do
            cd ${{github.workspace}}/examples/${directory[$i]}
            echo "Building and running ${directory[$i]} with Makefile"
            export LDFLAGS=${ldflags[$i]}
            rm -rf make.inc
            make
            ./${exec[$i]}
          done

  build-with-starpu:
    # Build with StarPU for task-based parallelism
    runs-on: ubuntu-latest

    env:
      starpu_DIR: ${{github.workspace}}/starpu
      PKG_CONFIG_PATH: ${{github.workspace}}/starpu/build/lib/pkgconfig

    steps:
      - name: Checkout <T>LAPACK
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Checkout StarPU
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: starpu-runtime/starpu
          ref: 87155272bc43821a89ae62ba0f6b55a105ccba4c # v1.4.1
          path: starpu

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          os: ubuntu-latest
          install-extras: starpu

      - name: Build and install StarPU
        working-directory: ${{env.starpu_DIR}}
        run: |
          ./autogen.sh
          ./configure --prefix="${{env.starpu_DIR}}/build"
          make
          make install

      - name: Configure TLAPACK
        uses: ./.github/actions/configure-tlapack
        with:
          build-type: ${{ env.BUILD_TYPE }}
          enable-testing: "OFF"
          enable-examples: "OFF"

      - name: Install TLAPACK
        run: sudo cmake --build build --config ${{env.BUILD_TYPE}} --target install

      - name: Build and run StarPU examples
        working-directory: examples/starpu
        run: |
          cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cmake --build build --target all

          echo "Running StarPU LU examples"
          cd build
          ./example_starpu_lu 10 8 10 8 0
          ./example_starpu_lu 10 8 10 8 recursive
          ./example_starpu_lu 9 24 9 24 recursive
          ./example_starpu_lu 9 24 3 24
          ./example_starpu_lu 9 24 9 8

          echo "Running StarPU GEMM example"
          ./example_starpu_gemm

          echo "Running StarPU POTRF example"
          ./example_starpu_potrf
