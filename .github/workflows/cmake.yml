name: CMake

on:
  pull_request:
    paths-ignore:
    - '.github/workflows/deploy_pages.yml'
    - '.github/workflows/doxygen.yml'
    - '.github/workflows/clang-format-check.yml'
    - '.gitattributes'
    - '.gitignore'
    - '.gitmodules'
    - 'docs/**'
    - 'LICENSE'
    - 'version.txt'
    - '**.md'

  push:
    branches:
    - master
    paths-ignore:
    - '.github/workflows/deploy_pages.yml'
    - '.github/workflows/doxygen.yml'
    - '.github/workflows/clang-format-check.yml'
    - '.gitattributes'
    - '.gitignore'
    - '.gitmodules'
    - 'docs/**'
    - 'LICENSE'
    - 'version.txt'
    - '**.md'

permissions:
  contents: read

env:
  CFLAGS: "-Wall -pedantic -Wno-unused-variable -Wno-unused-function"
  CXXFLAGS: "-Wall -pedantic -Wno-unused-variable -Wno-unused-function -std=c++17"
  FFLAGS: "-fimplicit-none -fcheck=all"
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  blaspp_DIR: "${{github.workspace}}/blaspp"
  lapackpp_DIR: "${{github.workspace}}/lapackpp"
  mdspan_DIR: "${{github.workspace}}/mdspan"
  eigen_DIR: "${{github.workspace}}/eigen"
  Catch2_DIR: "${{github.workspace}}/Catch2"
  Catch2_CMAKE_DIR: "${{github.workspace}}/Catch2/build/lib/cmake/Catch2"

defaults:
  run:
    shell: bash

jobs:

  build-all-os:
    # Use GNU compilers
  
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    env:
      CXXFLAGS: "-Wall -pedantic -Wno-unused-variable -Wno-unused-function -D TEST_REAL_TYPES=\"float, double, long double\" -D TEST_CPLX_TYPES=\"std::complex<float>, std::complex<double>, std::complex<long double>\""

    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11, windows-latest, ubuntu-latest ]
    
    steps:
    
    - name: Checkout <T>LAPACK
      uses: actions/checkout@v3
    
    - name: Install the Basics
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt update
        sudo apt install -y cmake
        sudo apt install -y gfortran

    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Install LAPACKE on Ubuntu
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt install -y liblapacke-dev

    - name: Build and install Catch2
      if: ${{ matrix.os != 'macos-11' }}
      run: |
        git clone https://github.com/catchorg/Catch2.git
        cd Catch2
        git checkout v3.0.1
        cmake -B build -G Ninja -H. -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX="${{env.Catch2_DIR}}/build"
        cmake --build build --target install

    - name: Build and install Catch2 on MacOS
      if: ${{ matrix.os == 'macos-11' }}
      env:
        LDFLAGS: "-lstdc++"
      run: |
        git clone https://github.com/catchorg/Catch2.git
        cd Catch2
        git checkout v3.0.1
        cmake -B build -G Ninja -DCMAKE_CXX_COMPILER="gcc-11" -H. -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX="${{env.Catch2_DIR}}/build"
        cmake --build build --target install

    - name: Checkout BLAS++ and LAPACK++
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        git clone https://bitbucket.org/weslleyspereira/blaspp "${{env.blaspp_DIR}}"
        git clone https://bitbucket.org/weslleyspereira/lapackpp "${{env.lapackpp_DIR}}"

    - name: Configure BLAS++
      if: ${{ matrix.os == 'ubuntu-latest' }}
      working-directory: ${{env.blaspp_DIR}}
      run: |
        git checkout tlapack
        cmake -B build -G Ninja

    - name: Configure LAPACK++
      if: ${{ matrix.os == 'ubuntu-latest' }}
      working-directory: ${{env.lapackpp_DIR}}
      run: |
        git checkout tlapack
        cmake -B build -G Ninja -D blaspp_DIR="${{env.blaspp_DIR}}/build"

    - name: Checkout mdspan and Eigen on Ubuntu
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        git clone https://github.com/kokkos/mdspan.git "${{env.mdspan_DIR}}"
        git clone https://gitlab.com/libeigen/eigen.git "${{env.eigen_DIR}}"

    - name: Build and install Eigen on Ubuntu
      if: ${{ matrix.os == 'ubuntu-latest' }}
      working-directory: ${{env.eigen_DIR}}
      run: |
        git checkout master
        cmake -B build -G Ninja -DCMAKE_INSTALL_PREFIX="${{env.eigen_DIR}}"
        cmake --build build --target install

    - name: Build and install mdspan on Ubuntu
      if: ${{ matrix.os == 'ubuntu-latest' }}
      working-directory: ${{env.mdspan_DIR}}
      run: |
        git checkout mdspan-0.4.0
        cmake -B build -G Ninja -DCMAKE_INSTALL_PREFIX="${{env.mdspan_DIR}}"
        cmake --build build --target install
        
    - name: Specific configurations for CMake on Ubuntu
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: >
        cmake -B build -G Ninja
        -D BUILD_TESTING=ON
        -D BUILD_BLASPP_TESTS=ON
        -D TLAPACK_TEST_EIGEN=ON
        -D TLAPACK_TEST_MDSPAN=ON
        -D blaspp_DIR="${{env.blaspp_DIR}}/build"
        -D blaspp_TEST_DIR="${{env.blaspp_DIR}}/test"
        -D BUILD_LAPACKPP_TESTS=ON
        -D lapackpp_DIR="${{env.lapackpp_DIR}}/build"
        -D lapackpp_TEST_DIR="${{env.lapackpp_DIR}}/test"
        -D Catch2_DIR="${{env.Catch2_CMAKE_DIR}}"

    - name: Specific configurations for CMake on MacOS
      if: ${{ matrix.os == 'macos-11' }}
      env:
        LDFLAGS: "-lstdc++"
      run: >
        cmake -B build -G Ninja
        -DCMAKE_CXX_COMPILER="gcc-11"
        -DCMAKE_Fortran_COMPILER="gfortran-11"
        -D Catch2_DIR="${{env.Catch2_CMAKE_DIR}}"

    - name: Specific configurations for CMake on Windows
      if: ${{ matrix.os == 'windows-latest' }}
      run: >
        cmake -B build -G Ninja
        -D CMAKE_EXE_LINKER_FLAGS="-Wl,--allow-multiple-definition"
        -D Catch2_DIR="${{env.Catch2_CMAKE_DIR}}"

    - name: Configure CMake on all platforms
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B build -G Ninja
        -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -D CMAKE_INSTALL_PREFIX="${{github.workspace}}/tlapack_install"
        -D BUILD_SHARED_LIBS=ON
        -D BUILD_EXAMPLES=ON
        -D BUILD_TESTING=ON
        -D BUILD_C_WRAPPERS=ON
        -D BUILD_Fortran_WRAPPERS=ON
        -D BUILD_CBLAS_WRAPPERS=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    - name: Run all examples
      # Mind that the job won't fail with only this step fails
      continue-on-error: true
      run: cmake --build build --target run-all-examples

    - name: Run tests
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Install
      run: cmake --build build --target install

  build-with-mpfr:
    # Use GNU compilers

    runs-on: ubuntu-latest
    env:
      CXXFLAGS: "-Wall -pedantic -Wno-unused-variable -Wno-unused-function -D TLAPACK_TYPES_TO_TEST=\"(legacyMatrix<mpfr::mpreal>), (legacyMatrix<mpfr::mpreal,std::size_t,Layout::RowMajor>)\""
      
    steps:     
    
    - name: Checkout <T>LAPACK
      uses: actions/checkout@v3
    
    - name: Install the Basics
      run: |
        sudo apt update
        sudo apt install -y cmake

    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Install MPFR C++
      run: sudo apt install -y libmpfrc++-dev

    - name: Configure CMake for <T>LAPACK
      run: >
        cmake -B build -G Ninja
        -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 
        -D CMAKE_INSTALL_PREFIX=${{github.workspace}}/tlapack_install
        -D BUILD_SHARED_LIBS=ON
        -D BUILD_EXAMPLES=ON
        -D BUILD_TESTING=ON
        -D BUILD_testBLAS_TESTS=OFF
        -D TLAPACK_TEST_MPFR=ON

    - name: Build <T>LAPACK
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    - name: Run all examples
      # Mind that the job won't fail with only this step fails
      continue-on-error: true
      run: cmake --build build --target run-all-examples

    - name: Run tests
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Install
      run: cmake --build build --target install

  build-with-openblas:
    # Use GNU compilers

    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout <T>LAPACK
      uses: actions/checkout@v3
    
    - name: Install the Basics
      run: |
        sudo apt update
        sudo apt install -y cmake
        sudo apt install -y gfortran

    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Install LAPACKE on Ubuntu
      run: sudo apt install -y liblapacke-dev

    - name: Install OpenBLAS
      run: sudo apt install -y libopenblas-dev

    - name: Checkout BLAS++ and LAPACK++
      run: |
        git clone https://bitbucket.org/weslleyspereira/blaspp ${{env.blaspp_DIR}}
        git clone https://bitbucket.org/weslleyspereira/lapackpp ${{env.lapackpp_DIR}}

    - name: Build and install BLAS++
      working-directory: ${{env.blaspp_DIR}}
      run: |
        git checkout tlapack
        cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBLA_VENDOR=OpenBLAS -Dbuild_tests=OFF -DCMAKE_INSTALL_PREFIX=${{env.blaspp_DIR}}
        cmake --build build --target install

    - name: Build and install LAPACK++
      working-directory: ${{env.lapackpp_DIR}}
      run: |
        git checkout tlapack
        cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBLA_VENDOR=OpenBLAS -Dbuild_tests=OFF -DCMAKE_INSTALL_PREFIX=${{env.lapackpp_DIR}} -D CMAKE_CXX_FLAGS="${{env.CXXFLAGS}} -D LAPACK_FORTRAN_ADD_"
        cmake --build build --target install

    - name: Configure CMake for <T>LAPACK
      run: >
        cmake -B build -G Ninja
        -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -D CMAKE_INSTALL_PREFIX=${{github.workspace}}/tlapack_install
        -D CMAKE_CXX_FLAGS="${{env.CXXFLAGS}} -D LAPACK_FORTRAN_ADD_"
        -D BUILD_SHARED_LIBS=ON
        -D BUILD_EXAMPLES=ON
        -D BUILD_TESTING=ON
        -D BUILD_C_WRAPPERS=ON
        -D BUILD_Fortran_WRAPPERS=ON
        -D BUILD_CBLAS_WRAPPERS=ON
        -D USE_LAPACKPP_WRAPPERS=ON
        -D BUILD_BLASPP_TESTS=ON
        -D blaspp_TEST_DIR=${{env.blaspp_DIR}}/test
        -D BUILD_LAPACKPP_TESTS=ON
        -D lapackpp_TEST_DIR=${{env.lapackpp_DIR}}/test

    - name: Build <T>LAPACK
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    # Mind that the job won't fail if only this step fails
    - name: Run tests
      working-directory: ${{github.workspace}}/build
      continue-on-error: true
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Install
      run: cmake --build build --target install

  build-test-performance:
    # Use GNU compilers
  
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
    
    steps:
    
    - name: Checkout <T>LAPACK
      uses: actions/checkout@v3
    
    - name: Install the Basics
      run: |
        sudo apt update
        sudo apt install -y cmake
        sudo apt install -y liblapack-dev

    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Checkout BLAS++ and LAPACK++
      run: |
        git clone https://bitbucket.org/weslleyspereira/blaspp ${{env.blaspp_DIR}}
        git clone https://bitbucket.org/weslleyspereira/lapackpp ${{env.lapackpp_DIR}}

    - name: Build and install BLAS++
      working-directory: ${{env.blaspp_DIR}}
      run: |
        git checkout tlapack
        cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -Dbuild_tests=OFF -DCMAKE_INSTALL_PREFIX=${{env.blaspp_DIR}}
        cmake --build build --target install

    - name: Build and install LAPACK++
      working-directory: ${{env.lapackpp_DIR}}
      run: |
        git checkout tlapack
        cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -Dbuild_tests=OFF -DCMAKE_INSTALL_PREFIX=${{env.lapackpp_DIR}}
        cmake --build build --target install

    - name: Configure CMake
      run: >
        cmake -B build -G Ninja
        -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -D CMAKE_INSTALL_PREFIX=${{github.workspace}}/tlapack_install
        -D BUILD_SHARED_LIBS=ON
        -D BUILD_EXAMPLES=OFF
        -D BUILD_TESTING=OFF
        -D USE_LAPACKPP_WRAPPERS=ON
        -D TLAPACK_NDEBUG=ON

    - name: Build and Install
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}  --target install

    - name: Install LAPACKE on Ubuntu
      run: sudo apt install -y liblapacke-dev

    - name: Build and run example comparing performance
      working-directory: ${{github.workspace}}/examples/potrf
      run: |
        cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -D CMAKE_PREFIX_PATH=${{github.workspace}}/tlapack_install
        cmake --build build --target all
        ./build/example_potrf

  build-with-mkl:
    # Use Intel compilers

    runs-on: ubuntu-latest
    env:
      CXX: icpx
      FC: ifx
      CXXFLAGS: "-Wall -pedantic -Wno-unused-variable -Wno-unused-function -Wno-c99-extensions -fp-model=precise"
      FFLAGS: ""
    steps:
    
    - name: Install the Basics
      run: |
        sudo apt update
        sudo apt install -y cmake

    - name: Install LAPACKE on Ubuntu
      run: sudo apt install -y liblapacke-dev

    - name: Intel Apt repository
      timeout-minutes: 1
      run: |
        # download the key to system keyring
        wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
        # add signed entry to apt sources and configure the APT client to use Intel repository:
        echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt update
        
    - name: Install Intel oneAPI
      timeout-minutes: 5
      run: sudo apt install -y intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic intel-oneapi-mkl
    
    - name: Checkout <T>LAPACK
      uses: actions/checkout@v3

    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Setup Intel oneAPI environment
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - name: Checkout BLAS++ and LAPACK++
      run: |
        git clone https://bitbucket.org/weslleyspereira/blaspp ${{env.blaspp_DIR}}
        git clone https://bitbucket.org/weslleyspereira/lapackpp ${{env.lapackpp_DIR}}

    - name: Build and install BLAS++
      working-directory: ${{env.blaspp_DIR}}
      run: |
        git checkout tlapack
        cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -Dbuild_tests=OFF -DCMAKE_INSTALL_PREFIX=${{env.blaspp_DIR}}
        cmake --build build --target install

    - name: Build and install LAPACK++
      working-directory: ${{env.lapackpp_DIR}}
      run: |
        git checkout tlapack
        cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -Dbuild_tests=OFF -DCMAKE_INSTALL_PREFIX=${{env.lapackpp_DIR}}
        cmake --build build --target install

    - name: Configure CMake for <T>LAPACK
      run: >
        cmake -B build -G Ninja
        -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -D CMAKE_INSTALL_PREFIX=${{github.workspace}}/tlapack_install
        -D BUILD_SHARED_LIBS=ON
        -D BUILD_EXAMPLES=ON
        -D BUILD_TESTING=ON
        -D BUILD_C_WRAPPERS=ON
        -D BUILD_Fortran_WRAPPERS=ON
        -D BUILD_CBLAS_WRAPPERS=ON
        -D USE_LAPACKPP_WRAPPERS=ON
        -D BUILD_BLASPP_TESTS=ON
        -D blaspp_TEST_DIR=${{env.blaspp_DIR}}/test
        -D BUILD_LAPACKPP_TESTS=ON
        -D lapackpp_TEST_DIR=${{env.lapackpp_DIR}}/test

    - name: Build <T>LAPACK
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    # Mind that the job won't fail if only this step fails
    - name: Run tests
      working-directory: ${{github.workspace}}/build
      continue-on-error: true
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Install
      run: cmake --build build --target install

  build-with-blis:
    # Use GNU compilers
    
    env:
      blis_DIR: ${{github.workspace}}/blis
      lapack_DIR: ${{github.workspace}}/lapack
      LD_LIBRARY_PATH: "/usr/local/lib/"

    runs-on: ubuntu-20.04
    steps:
    
    - name: Checkout <T>LAPACK
      uses: actions/checkout@v3
    
    - name: Install the Basics
      run: |
        sudo apt update
        sudo apt install -y cmake
        sudo apt install -y gfortran

    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Install BLIS
      run: sudo apt install -y libblis-dev

    - name: Checkout LAPACK
      run: |
        git clone https://github.com/Reference-LAPACK/lapack.git ${{env.lapack_DIR}}

    - name: Build and install LAPACK
      working-directory: ${{env.lapack_DIR}}
      run: |
        cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -D CMAKE_INSTALL_PREFIX=${{env.lapack_DIR}} -D USE_OPTIMIZED_BLAS=ON -D BLA_VENDOR=FLAME -D LAPACKE=ON -D CBLAS=ON
        cmake --build build --target install

    - name: Checkout BLAS++ and LAPACK++
      run: |
        git clone https://bitbucket.org/weslleyspereira/blaspp ${{env.blaspp_DIR}}
        git clone https://bitbucket.org/weslleyspereira/lapackpp ${{env.lapackpp_DIR}}

    - name: Build and install BLAS++
      working-directory: ${{env.blaspp_DIR}}
      run: |
        git checkout tlapack
        cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBLA_VENDOR=FLAME -Dbuild_tests=OFF -DCMAKE_INSTALL_PREFIX=${{env.blaspp_DIR}}
        cmake --build build --target install

    - name: Build and install LAPACK++
      working-directory: ${{env.lapackpp_DIR}}
      run: |
        git checkout tlapack
        cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -Dbuild_tests=OFF -DCMAKE_INSTALL_PREFIX=${{env.lapackpp_DIR}} -D CMAKE_CXX_FLAGS="${{env.CXXFLAGS}} -D LAPACK_FORTRAN_ADD_" -D LAPACK_LIBRARIES="${{env.lapack_DIR}}/lib/liblapack.a;-lgfortran"
        cmake --build build --target install

    - name: Configure CMake for <T>LAPACK
      run: >
        cmake -B build -G Ninja
        -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -D CMAKE_INSTALL_PREFIX=${{github.workspace}}/tlapack_install
        -D CMAKE_PREFIX_PATH="${{env.lapack_DIR}}"
        -D CMAKE_CXX_FLAGS="${{env.CXXFLAGS}} -D LAPACK_FORTRAN_ADD_"
        -D BUILD_SHARED_LIBS=ON
        -D BUILD_EXAMPLES=ON
        -D BUILD_TESTING=ON
        -D BUILD_C_WRAPPERS=ON
        -D BUILD_Fortran_WRAPPERS=ON
        -D BUILD_CBLAS_WRAPPERS=ON
        -D USE_LAPACKPP_WRAPPERS=ON
        -D BUILD_BLASPP_TESTS=ON
        -D blaspp_TEST_DIR=${{env.blaspp_DIR}}/test
        -D BUILD_LAPACKPP_TESTS=ON
        -D lapackpp_TEST_DIR=${{env.lapackpp_DIR}}/test

    - name: Build <T>LAPACK
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    # Mind that the job won't fail if only this step fails
    - name: Run tests
      working-directory: ${{github.workspace}}/build
      continue-on-error: true
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Install
      run: cmake --build build --target install

  build-in-debug-mode:
    # Use GNU compilers

    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout <T>LAPACK
      uses: actions/checkout@v3
    
    - name: Install the Basics
      run: |
        sudo apt update
        sudo apt install -y cmake
        sudo apt install -y gfortran

    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Install LAPACK and LAPACKE on Ubuntu
      run: sudo apt install -y liblapack-dev liblapacke-dev

    - name: Checkout BLAS++ and LAPACK++
      run: |
        git clone https://bitbucket.org/weslleyspereira/blaspp ${{env.blaspp_DIR}}
        git clone https://bitbucket.org/weslleyspereira/lapackpp ${{env.lapackpp_DIR}}

    - name: Build and install BLAS++
      working-directory: ${{env.blaspp_DIR}}
      run: |
        git checkout tlapack
        cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=Debug -Dbuild_tests=OFF -DCMAKE_INSTALL_PREFIX=${{env.blaspp_DIR}}
        cmake --build build --target install

    - name: Build and install LAPACK++
      working-directory: ${{env.lapackpp_DIR}}
      run: |
        git checkout tlapack
        cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=Debug -Dbuild_tests=OFF -DCMAKE_INSTALL_PREFIX=${{env.lapackpp_DIR}}
        cmake --build build --target install

    - name: Configure CMake for <T>LAPACK
      run: >
        cmake -B build -G Ninja
        -D CMAKE_BUILD_TYPE=Debug
        -D CMAKE_INSTALL_PREFIX=${{github.workspace}}/tlapack_install
        -D BUILD_SHARED_LIBS=ON
        -D BUILD_EXAMPLES=ON
        -D BUILD_TESTING=ON
        -D BUILD_C_WRAPPERS=ON
        -D BUILD_Fortran_WRAPPERS=ON
        -D BUILD_CBLAS_WRAPPERS=ON
        -D USE_LAPACKPP_WRAPPERS=ON
        -D BUILD_BLASPP_TESTS=ON
        -D blaspp_TEST_DIR=${{env.blaspp_DIR}}/test
        -D BUILD_LAPACKPP_TESTS=ON
        -D lapackpp_TEST_DIR=${{env.lapackpp_DIR}}/test

    - name: Build <T>LAPACK
      run: cmake --build build --config Debug

    # Mind that the job won't fail if only this step fails
    - name: Run tests
      working-directory: ${{github.workspace}}/build
      continue-on-error: true
      run: ctest -C Debug --output-on-failure

    - name: Install
      run: cmake --build build --target install

  build-with-starpu:
    # Use GNU compilers
    
    env:
      starpu_DIR: ${{github.workspace}}/starpu
      PKG_CONFIG_PATH: ${{github.workspace}}/starpu/build/lib/pkgconfig
      
    runs-on: ubuntu-20.04
    steps:
    
    - name: Checkout <T>LAPACK
      uses: actions/checkout@v3
    
    - name: Install the Basics
      run: |
        sudo apt update
        sudo apt install -y cmake
        sudo apt install -y gfortran
        sudo apt install -y pkg-config

    - name: Install LAPACKE on Ubuntu
      run: sudo apt install -y liblapacke-dev

    - name: Build and install StarPU on Ubuntu
      run: |
        sudo apt install -y libtool-bin libhwloc-dev g++ libudev-dev
        git clone https://gitlab.inria.fr/starpu/starpu.git
        cd starpu
        ./autogen.sh
        ./configure --prefix="${{env.starpu_DIR}}/build"
        make clean
        make
        make install

    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Configure <T>LAPACK
      run: >
        cmake -B build -G Ninja
        -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -D CMAKE_INSTALL_PREFIX="${{github.workspace}}/tlapack_install"
        -D BUILD_EXAMPLES=OFF
        -D BUILD_TESTING=OFF

    - name: Install <T>LAPACK
      run: cmake --build build --config ${{env.BUILD_TYPE}} --target install

    - name: Build examples with StarPU
      working-directory: ${{github.workspace}}/examples/starpu
      run: |
        cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -D CMAKE_PREFIX_PATH=${{github.workspace}}/tlapack_install
        cmake --build build --target all

    - name: Run example LU
      working-directory: ${{github.workspace}}/examples/starpu/build
      run: |
        echo "\nRunning example_lu 10 8 10 8 level 0 ---------------------------"
        ./example_starpu_lu 10 8 10 8 0
        echo "\nRunning example_lu 10 8 10 8 recursive -------------------------"
        ./example_starpu_lu 10 8 10 8 recursive
        echo "\nRunning example_lu 9 24 9 24 recursive -------------------------"
        ./example_starpu_lu 9 24 9 24 recursive
        echo "\nRunning example_lu 9 24 3 24 level 0 ---------------------------"
        ./example_starpu_lu 9 24 3 24
        echo "\nRunning example_lu 9 24 9 8 level 0 ----------------------------"
        ./example_starpu_lu 9 24 9 8

    - name: Run example GEMM
      working-directory: ${{github.workspace}}/examples/starpu/build
      run: |
        echo "\nRunning example_gemm -------------------------------------------"
        ./example_starpu_gemm

    - name: Run example POTRF
      working-directory: ${{github.workspace}}/examples/starpu/build
      run: |
        echo "\nRunning example_potrf ------------------------------------------"
        ./example_starpu_potrf
